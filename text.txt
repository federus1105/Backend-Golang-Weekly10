r.ParseMultipartForm(10 << 20)


// Maksimum ukuran file dalam byte (misalnya 2MB)
const MaxFileSize = 2 * 1024 * 1024

// Daftar ekstensi file yang diperbolehkan
var allowedExtensions = map[string]bool{
    ".jpg":  true,
    ".jpeg": true,
    ".png":  true,
    ".gif":  true,
}

func uploadPoster(ctx *gin.Context, body *models.YourRequestBodyStruct, user models.User) {
    file := body.Image
    if file != nil {
        ext := strings.ToLower(filepath.Ext(file.Filename))

        // ✅ 1. Validasi ekstensi
        if !allowedExtensions[ext] {
            ctx.JSON(http.StatusBadRequest, gin.H{
                "success": false,
                "error":   "Format file tidak didukung. Hanya JPG, PNG, GIF yang diizinkan.",
            })
            return
        }

        // ✅ 2. Validasi ukuran file
        if file.Size > MaxFileSize {
            ctx.JSON(http.StatusBadRequest, gin.H{
                "success": false,
                "error":   "Ukuran file melebihi batas maksimum 2MB.",
            })
            return
        }

        // ✅ 3. Simpan file
        filename := fmt.Sprintf("%d_image_%d%s", time.Now().UnixNano(), user.UserId, ext)
        path := filepath.Join("public", filename)

        if err := ctx.SaveUploadedFile(file, path); err != nil {
            log.Println("Gagal upload poster:", err)
            ctx.JSON(http.StatusBadRequest, gin.H{
                "success": false,
                "error":   "Gagal upload poster",
            })
            return
        }

        // Simpan path poster
        body.PosterPath = filename
    }
}






package utils

import (
	"errors"
	"fmt"
	"mime/multipart"
	"path/filepath"
	"strings"
	"time"
)

const MaxFileSize = 2 * 1024 * 1024 // 2MB

var allowedExtensions = map[string]bool{
	".jpg":  true,
	".jpeg": true,
	".png":  true,
	".gif":  true,
}

// UploadImageFile handles validation and saving of image file uploads.
// Returns saved filename or error.
func UploadImageFile(file *multipart.FileHeader, uploadDir string, prefix string) (string, error) {
	if file == nil {
		return "", errors.New("file tidak ditemukan")
	}

	ext := strings.ToLower(filepath.Ext(file.Filename))

	if !allowedExtensions[ext] {
		return "", errors.New("format file tidak didukung (hanya jpg, jpeg, png, gif)")
	}

	if file.Size > MaxFileSize {
		return "", errors.New("ukuran file maksimal 2MB")
	}

	// Generate filename: e.g. 1630000000_image_123.jpg
	filename := fmt.Sprintf("%d_%s%s", time.Now().UnixNano(), prefix, ext)
	savePath := filepath.Join(uploadDir, filename)

	return savePath, nil
}
